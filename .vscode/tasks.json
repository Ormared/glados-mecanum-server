{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "detail": "Build workspace (default)",
            "type": "shell",
            "command": "colcon build",
            "problemMatcher": [
                "$ament_flake8"
            ]
        },
        {
            "label": "build_release",
            "detail": "Build workspace (release)",
            "type": "shell",
            "command": "./build.sh",
            "options": {
                "env": {
                    "BUILD_TYPE": "Release"
                }
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "source local",
            "detail": "Source local workspace",
            "type": "shell",
            "command": "source install/setup.bash"
        },
        {
            "label": "rqt graph",
            "detail": "Launch rqt graph",
            "type": "shell",
            "command": "rqt_graph"
        },
        {
            "label": "la_gazebo",
            "detail": "Launch glados gazebo launch file",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_gazebo.launch.py"
        },
        {
            "label": "lax_gazebo",
            "detail": "Launch foglove glados gazebo launch file",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_gazebo.fox.launch.py"
        },
        {
            "label": "gazebo depot",
            "detail": "Launch glados gazebo launch file",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_gazebo.launch.py world:=depot"
        },
        {
            "label": "lidar",
            "detail": "Launch s2 lidar launch file",
            "type": "shell",
            "command": "ros2 launch sllidar_ros2 sllidar_s2_launch.py frame_id:=lidar_link"
        },
        {
            "label": "slam_toolbox",
            "detail": "Launch slam_toolbox with slam_params_file",
            "type": "shell",
            "command": "ros2 launch slam_toolbox online_async_launch.py slam_params_file:=/workspaces/glados-mecanum-server_AO/src/glados_bringup/config/mapper_params_online_async.yaml"
        },
        {
            "label": "slam_toolbox_gz",
            "detail": "Launch slam_toolbox with slam_params_file",
            "type": "shell",
            "command": "ros2 launch slam_toolbox online_async_launch.py slam_params_file:=./src/glados_bringup/config/mapper_params_online_async.yaml use_sim_time:=true"
        },
        {
            "label": "map server_gz",
            "detail": "Launch map server",
            "type": "shell",
            "command": "ros2 run nav2_map_server map_server --ros-args -p yaml_filename:=map_save.yaml -p use_sim_time:=true"
        },
        {
            "label": "map bringup",
            "detail": "Launch map lifecycle bringup",
            "type": "shell",
            "dependsOn": "map server",
            "command": "ros2 run nav2_util lifecycle_bringup map_server",
            "problemMatcher": []
        },
        {
            "label": "amcl_gz",
            "detail": "Launch amcl gz",
            "type": "shell",
            "command": "ros2 run nav2_amcl amcl --ros-args -p use_sim_time:=true"
        },
        {
            "label": "amcl",
            "type": "shell",
            "command": "ros2 launch nav2_amcl amcl",
            "dependsOn": "map lifecycle"
        },
        {
            "label": "bringup amcl",
            "type": "shell",
            "command": "ros2 run nav2_util lifecycle_bringup amcl",
            "dependsOn": "amcl"
        },
        {
            "label": "nav2_localization_gz",
            "detail": "Launch amcl localization",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_localization_launch.py use_sim_time:=true"
        },
        {
            "label": "nav2_localization",
            "detail": "Launch amcl localization",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_localization_launch.py"
        },
        {
            "label": "nav2_navigation_gz",
            "detail": "Launch navigation system",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_navigation_launch.py use_sim_time:=true"
        },
        {
            "label": "nav2_navigation",
            "detail": "Launch navigation system",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_navigation_launch.py"
        },
        {
            "label": "ball_tracker",
            "detail": "Launch ball tracker node",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_ball_tracker.launch.py use_sim_time:=true"
        },
        {
            "label": "rviz",
            "detail": "Launch rviz",
            "type": "shell",
            "command": "ros2 launch glados_bringup glados_rviz.launch.py"
        },
        {
            "label": "teleop_keyboard",
            "detail": "Launch teleop keyboard",
            "type": "shell",
            "command": "ros2 run teleop_twist_keyboard teleop_twist_keyboard"
        },
        {
            "label": "debug",
            "detail": "Build workspace (debug)",
            "type": "shell",
            "command": "./build.sh",
            "options": {
                "env": {
                    "BUILD_TYPE": "Debug"
                }
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "test",
            "detail": "Run all unit tests and show results.",
            "type": "shell",
            "command": "./test.sh",
            "group": {
                "kind": "test",
                "isDefault": true
            }
        },
        {
            "label": "clean",
            "detail": "Run the clean target",
            "type": "shell",
            "command": "colcon build --cmake-target clean",
            "problemMatcher": "$gcc"
        },
        {
            "label": "purge",
            "detail": "Purge workspace by deleting all generated files.",
            "type": "shell",
            "command": "sudo rm -fr build install log; sudo py3clean .",
            "problemMatcher": []
        },
        {
            "label": "source",
            "detail": "Source workspace",
            "type": "shell",
            "command": "source /opt/ros/jazzy/setup.bash",
            "problemMatcher": []
        },
        {
            "label": "fix",
            "detail": "Reformat files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify --reformat src/",
            "problemMatcher": []
        },
        {
            "label": "uncrustify",
            "detail": "Lint files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "uncrustify",
                    "source": "uncrustify",
                    "fileLocation": "relative",
                    "pattern": [
                        {
                            "regexp": "^(.*)'(.*)':",
                            "kind": "file",
                            "file": 2,
                            "message": 1
                        }
                    ]
                }
            ]
        },
        {
            "label": "cpplint",
            "detail": "Lint files with cpplint.",
            "type": "ament",
            "task": "cpplint",
            "path": "src/",
            "problemMatcher": "$ament_cpplint",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "cppcheck",
            "detail": "Run static code checker cppcheck.",
            "type": "ament",
            "task": "cppcheck",
            "path": "src/",
            "problemMatcher": "$ament_cppcheck",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "options": {
                "env": {
                    "AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS": "1"
                }
            }
        },
        {
            "label": "lint_cmake",
            "detail": "Run lint on cmake files.",
            "type": "ament",
            "task": "lint_cmake",
            "path": "src/",
            "problemMatcher": "$ament_lint_cmake",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "flake8",
            "detail": "Run flake8 on python files.",
            "type": "ament",
            "task": "flake8",
            "path": "src/",
            "problemMatcher": "$ament_flake8",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "pep257",
            "detail": "Run pep257 on python files.",
            "type": "ament",
            "task": "pep257",
            "path": "src/",
            "problemMatcher": "$ament_pep257",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "xmllint",
            "detail": "Run xmllint on xml files.",
            "type": "ament",
            "task": "xmllint",
            "path": "src/",
            "problemMatcher": "$ament_xmllint",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "lint all",
            "detail": "Run all linters.",
            "dependsOn": [
                "cppcheck",
                "cpplint",
                "flake8",
                "lint_cmake",
                "pep257",
                "xmllint",
                "uncrustify"
            ],
            "problemMatcher": []
        },
        {
            "label": "new ament_cmake package",
            "detail": "Create a new ROS cpp package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory src --build-type ament_cmake ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "new ament_python package",
            "detail": "Create a new ROS python package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory src --build-type ament_python ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "import from workspace file",
            "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
            "type": "shell",
            "command": "vcs import < src/ros2.repos src",
            "problemMatcher": []
        },
        {
            "label": "update workspace file",
            "detail": "Use vcs to update repositories in src to workspace file.",
            "type": "shell",
            "command": "vcs export src > src/ros2.repos",
            "problemMatcher": []
        },
        {
            "label": "install dependencies",
            "detail": "Install all dependencies specified in the workspaces package.xml files.",
            "type": "shell",
            "command": "sudo apt-get update && rosdep update && rosdep install --from-paths src --ignore-src -y",
            "problemMatcher": []
        },
        {
            "label": "setup",
            "detail": "Set up the workspace",
            "type": "shell",
            "command": "./setup.sh",
            "problemMatcher": []
        },
        {
            "label": "add submodules from .repos",
            "detail": "Create a git submodule for all repositories in your .repos file",
            "type": "shell",
            "command": "python3 .devcontainer/repos_to_submodules.py",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "package",
            "type": "promptString",
            "description": "Package name"
        }
    ]
}
